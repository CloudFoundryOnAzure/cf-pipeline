#!/bin/bash
set -xeu

source cf-pipeline/lib/shared-functions

function commit_integration_configs() {
  set -x
  pushd integration-configs
    git config user.name "${GIT_COMMIT_USERNAME}"
    git config user.email "${GIT_COMMIT_EMAIL}"
    git add "${CATS_INTEGRATION_CONFIG_FILE}"
    git commit -m "Update integration configs"
  popd
  git clone integration-configs/ updated-integration-configs
  set +x
}
function main() {
  az login --service-principal -u ${CLIENT_ID} -p ${CLIENT_SECRET} --tenant ${TENANT_ID}
  
  az group create --name ${RESOURCE_GROUP_NAME} --location ${AZURE_REGION}
  
  pushd template 
    # Generate parameter file
    change_json_field .parameters.tenantID.value \"${TENANT_ID}\" ${PARAMETER_FILE}
    change_json_field .parameters.clientID.value \"${CLIENT_ID}\" ${PARAMETER_FILE}
    change_json_field .parameters.clientSecret.value \"${CLIENT_SECRET}\" ${PARAMETER_FILE}
    change_json_field .parameters.vmName.value \"${VM_NAME}\" ${PARAMETER_FILE}
    change_json_field .parameters.adminUsername.value \"${ADMIN_USERNAME}\" ${PARAMETER_FILE}
    change_json_field .parameters.sshKeyData.value "\"${SSH_PUBLIC_KEY}\"" ${PARAMETER_FILE}
    # Enable auto deploy bosh and cf 
    change_json_field .parameters.autoDeployBosh.value \"enabled\" ${PARAMETER_FILE}
    change_json_field .parameters.autoDeployCloudFoundry.value \"enabled\" ${PARAMETER_FILE}

    # Change artifacts location
    change_json_field .parameters._artifactsLocation.defaultValue \"https://raw.githubusercontent.com/norshtein/azure-quickstart-templates/bump/bosh-setup/\" ${TEMPLATE_FILE}

    # Deploy bosh and cf 
    az group deployment create \
        --name Deployment \
        --resource-group ${RESOURCE_GROUP_NAME} \
        --template-file ${TEMPLATE_FILE} \
        --parameters ${PARAMETER_FILE}
  popd

  # Get devbox ip address
  local ip
  ip=$(az vm show -g ${RESOURCE_GROUP_NAME} -n ${VM_NAME} -d -otable | sed -n 3p | awk '{print $5}')
  
  # Fetch cloud foundry information
  local fetch_password
  local fetch_system_domain
  fetch_password="scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i pkfile ${ADMIN_USERNAME}@${ip}:/home/${ADMIN_USERNAME}/cf-deployment-vars.yml ./"
  fetch_system_domain="scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i pkfile ${ADMIN_USERNAME}@${ip}:/home/${ADMIN_USERNAME}/login_cloud_foundry.sh ./"
  echo "$SSH_PRIVATE_KEY" > pkfile
  chmod 600 pkfile
  retryop "$fetch_password"
  retryop "$fetch_system_domain"
  
  local admin_password
  local api_endpoint
  local system_domain
  admin_password=$(grep cf_admin_password cf-deployment-vars.yml | awk '{print $2}')
  api_endpoint=$(grep -o 'api.*.xip.io' login_cloud_foundry.sh)
  system_domain=$(echo $api_endpoint | cut -b 5-)
  
  # Generate config file
  if [ -f "integration-configs/${CATS_INTEGRATION_CONFIG_FILE}" ]; then
    local new_cats_integration_config
    new_cats_integration_config=$(cat "integration-configs/${CATS_INTEGRATION_CONFIG_FILE}" | jq ".admin_password=\"${admin_password}\"")
    new_cats_integration_config=$(echo "${new_cats_integration_config}" | jq ".api=\"${api_endpoint}\" | .apps_domain=\"${system_domain}\"")
  echo "${new_cats_integration_config}" > "integration-configs/${CATS_INTEGRATION_CONFIG_FILE}"
  fi
}

trap commit_integration_configs EXIT
main
