---
resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
- name: email
  type: docker-image
  source:
    repository: pcfseceng/email-resource

resources:
- name: cf-deployment-release-candidate
  type: git
  source:
    branch: release-candidate
    uri: https://github.com/cloudfoundry/cf-deployment.git
- name: notify
  type: slack-notification
  source:
    url: {{SLACK_WEBHOOK}}
- name: send-an-email
  type: email
  source:
    smtp:
      host: {{smtp-host}}
      port: {{smtp-port}}
      username: {{smtp-username}}
      password: {{smtp-password}}
    from: {{email-from}}
    to: [ {{email-to}} ]
- name: store 
  type: git
  source:
    branch: {{BBLSTATE_BRANCH}}
    uri: {{BBLSTATE_REPO_URI}}
    private_key: {{BBLSTATE_PRIVATE_KEY}}
- name: cf-deployment-concourse-tasks
  type: git
  source:
    branch: master
    uri: https://github.com/cloudfoundry/cf-deployment-concourse-tasks.git
- name: cf-acceptance-tests
  type: git
  source:
    branch: master
    uri: https://github.com/cloudfoundry/cf-acceptance-tests.git
- name: cf-deployment
  type: git
  source:
    branch: release-candidate
    uri: https://github.com/cloudfoundry/cf-deployment.git
- name: cf-pipeline
  type: git
  source:
    branch: master
    uri: https://github.com/CloudFoundryOnAzure/cf-pipeline.git

jobs:
- name: create-certs-for-application-gateway
  serial_groups: [main-group]
  serial: true
  plan:
  - aggregate:
    - {get: cf-deployment-release-candidate, trigger: true}
    - {get: bbl-state, resource: store}
    - {get: cf-pipeline}
  - task: create-certs-for-application-gateway
    file: cf-pipeline/lib/create-cert/task.yml
    params:
      PFX_FILE_NAME: {{BBL_LB_CERT}}
      KEY_NAME: {{BBL_LB_KEY}}
      GIT_COMMIT_USERNAME: {{GIT_COMMIT_USERNAME}}
      GIT_COMMIT_EMAIL: {{GIT_COMMIT_EMAIL}}
  - put: store 
    params: {repository: updated-bbl-state, rebase: true}
- name: bbl-up
  serial_groups: [main-group]
  serial: true
  plan:
  - aggregate:
    - {get: bbl-state, resource: store, trigger: true, passed: [create-certs-for-application-gateway]}
    - {get: bbl-config, resource: store}
    - {get: cf-deployment-concourse-tasks}
  - task: bbl-up
    file: cf-deployment-concourse-tasks/bbl-up/task.yml
    params: 
      BBL_AZURE_CLIENT_ID: {{BBL_AZURE_CLIENT_ID}} 
      BBL_AZURE_CLIENT_SECRET: {{BBL_AZURE_CLIENT_SECRET}} 
      BBL_AZURE_TENANT_ID: {{BBL_AZURE_TENANT_ID}}
      BBL_AZURE_SUBSCRIPTION_ID: {{BBL_AZURE_SUBSCRIPTION_ID}}
      BBL_AZURE_REGION: {{BBL_AZURE_REGION}}
      BBL_IAAS: "azure"
      BBL_LB_CERT: {{BBL_LB_CERT}}
      BBL_LB_KEY: {{BBL_LB_KEY}}
      LB_DOMAIN: {{LB_DOMAIN}}
      GIT_COMMIT_EMAIL: {{GIT_COMMIT_EMAIL}}
      GIT_COMMIT_USERNAME: {{GIT_COMMIT_USERNAME}}
  - put: bbl-state
    resource: store
    params: {repository: updated-bbl-state , rebase: true}

- name: bosh-upload-stemcell
  serial_groups: [main-group]
  serial: true
  plan:
  - aggregate:
    - {get: bbl-state, resource: store, trigger: true, passed: [bbl-up]}
    - {get: cf-deployment-concourse-tasks}
    - {get: cf-deployment}
  - task: bosh-upload-stemcell
    file: cf-deployment-concourse-tasks/bosh-upload-stemcell-from-cf-deployment/task.yml
    params:
      INFRASTRUCTURE: azure
  
- name: bosh-deploy-cf
  serial_groups: [main-group]
  serial: true
  plan:
  - aggregate:
    - {get: bbl-state, trigger: true, resource: store, passed: [bosh-upload-stemcell]}
    - {get: cf-deployment-concourse-tasks}
    - {get: cf-deployment}
  - task: bosh-deploy-cf
    file: cf-deployment-concourse-tasks/bosh-deploy/task.yml
    params:
      SYSTEM_DOMAIN: {{SYSTEM_DOMAIN}}
      REGENERATE_VARS_STORE: true
    input_mapping: 
      vars-store: bbl-state
      ops-files: cf-deployment
      vars-files: bbl-state
  - put: updated-vars-store
    resource: store
    params: {repository: updated-vars-store, rebase: true}

- name: update-integration-configs
  serial_groups: [main-group]
  serial: true
  plan:
  - aggregate:
    - {get: updated-vars-store, trigger: true, resource: store, passed: [bosh-deploy-cf]}
    - {get: cf-deployment-concourse-tasks}
  - task: update-integration-configs
    file: cf-deployment-concourse-tasks/update-integration-configs/task.yml
    params:
      SYSTEM_DOMAIN: {{SYSTEM_DOMAIN}}
      GIT_COMMIT_EMAIL: {{GIT_COMMIT_EMAIL}}
      GIT_COMMIT_USERNAME: {{GIT_COMMIT_USERNAME}}
    input_mapping:
      integration-configs: updated-vars-store
      vars-store: updated-vars-store
  - put: updated-integration-configs
    resource: store
    params: {repository: updated-integration-configs, rebase: true}  
- name: sleep
  serial_groups: [main-group]
  serial: true
  plan:
    - aggregate:
      - {get: store, trigger: true, passed: [update-integration-configs]}
      - {get: cf-pipeline}
    - task: sleep
      file: cf-pipeline/lib/sleep/task.yml
      params:
        SLEEP_TIME: 600
- name: run-cats
  serial_groups: [main-group]
  serial: true
  plan:
  - aggregate:
    - {get: updated-integration-configs, trigger: true, resource: store, passed: [sleep]}
    - {get: cf-deployment-concourse-tasks}
    - {get: cf-acceptance-tests}
    - {get: cf-pipeline}
  - task: run-cats
    file: cf-deployment-concourse-tasks/run-cats/task.yml
    input_mapping:
      integration-config: updated-integration-configs
      cf-acceptance-tests: cf-acceptance-tests
    params:
      CONFIG_FILE_PATH: {{CONFIG_FILE_PATH}}
      NODES: 2
      SKIP_REGEXP: "transparently proxies both reserved characters and unsafe characters"
    on_failure:
      put: notify
      params:
        text: {{SLACK_TEXT}}
      on_success:
        task: task-send-email
        file: cf-pipeline/lib/send-email/task.yml
        params:
          SUBJECT: {{SUBJECT}}
          BODY: {{BODY}}
          OUTPUT_SUBJECT_FILE_NAME: email-subject
          OUTPUT_BODY_FILE_NAME: email-body
        on_success:
          put: send-an-email
          params:
            subject: email-out/email-subject
            body: email-out/email-body

- name: bosh-delete-cf
  serial_groups: [main-group]
  serial: true
  plan:
  - aggregate:
    - {get: bbl-state, trigger: true, resource: store, passed: [run-cats]}
    - {get: cf-deployment-concourse-tasks}
  - task: bosh-delete-cf
    file: cf-deployment-concourse-tasks/bosh-delete-deployment/task.yml

- name: bosh-cleanup
  serial_groups: [main-group]
  serial: true
  plan:
  - aggregate:
    - {get: bbl-state, trigger: true, resource: store, passed: [bosh-delete-cf]}
    - {get: cf-deployment-concourse-tasks}
  - task: bosh-cleanup
    file: cf-deployment-concourse-tasks/bosh-cleanup/task.yml

- name: bbl-destory
  serial_groups: [main-group]
  serial: true
  plan:
  - aggregate:
    - {get: bbl-state, trigger: true, resource: store, passed: [bosh-cleanup]}
    - {get: cf-deployment-concourse-tasks}
    - {get: cf-pipeline} 
  - task: bbl-destory
    file: cf-deployment-concourse-tasks/bbl-destroy/task.yml
    params:  
      GIT_COMMIT_EMAIL: {{GIT_COMMIT_EMAIL}}
      GIT_COMMIT_USERNAME: {{GIT_COMMIT_USERNAME}}
      BBL_AZURE_CLIENT_ID: {{BBL_AZURE_CLIENT_ID}}
      BBL_AZURE_CLIENT_SECRET: {{BBL_AZURE_CLIENT_SECRET}}
      BBL_AZURE_TENANT_ID: {{BBL_AZURE_TENANT_ID}}
      BBL_AZURE_SUBSCRIPTION_ID: {{BBL_AZURE_SUBSCRIPTION_ID}}
    on_failure:
      task: delete-bbl-dir
      file: cf-pipeline/lib/delete-bbl-dir/task.yml
      params:
        GIT_COMMIT_EMAIL: {{GIT_COMMIT_EMAIL}}
        GIT_COMMIT_USERNAME: {{GIT_COMMIT_USERNAME}}
      on_success:
        put: store
        params: {repository: empty-bbl-state, force: true}
  - put: updated-bbl-state
    resource: store
    params: {repository: updated-bbl-state, rebase: true}   
